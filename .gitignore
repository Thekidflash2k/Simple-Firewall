import os
import socket
import requests

# Constants
BLOCKED_IPS = {}
BLOCKED_WEBSITES = {}
BLOCKED_APPLICATIONS = {}

# Helper functions

def add_ip_to_block(ip, port):
    if (ip, port) in BLOCKED_IPS:
        print(f"IP {ip} with port {port} is already blocked")
        return
    
    if is_ip_port_in_hosts(ip, port):
        print(f"IP {ip} with port {port} is already in the block list.")
        return
    
    BLOCKED_IPS[(ip, port)] = True
    print(f"Added {ip} with port {port} to blocked IPs")

def remove_ip_from_block(ip, port):
    if (ip, port) in BLOCKED_IPS:
        del BLOCKED_IPS[(ip, port)]
        print(f"Unblocked {ip} with port {port}")
    else:
        print(f"IP {ip} with port {port} is not blocked")

def add_website_to_block(website):
    if website in BLOCKED_WEBSITES:
        print(f"{website} is already blocked")
        return
    
    try:
        ip = socket.gethostbyname(website)
        if is_website_in_hosts(website):
            print(f"{website} is already in the block list.")
            return
        
        dns_servers = get_dns_servers(website)
        BLOCKED_WEBSITES[website] = {'ip': ip, 'dns_servers': dns_servers}
        block_website_on_system(website)
        print(f"Blocked {website} on the system")
    except socket.gaierror:
        print(f"Cannot resolve DNS for {website}")

def remove_website_from_block(website):
    if website in BLOCKED_WEBSITES:
        del BLOCKED_WEBSITES[website]
        unblock_website_on_system(website)
        print(f"Unblocked {website} on the system")
    else:
        print(f"{website} is not blocked")

def add_application_to_block(application):
    if application in BLOCKED_APPLICATIONS:
        print(f"{application} is already blocked")
        return
    
    BLOCKED_APPLICATIONS[application] = True
    print(f"Blocked connections for application: {application}")

def remove_application_from_block(application):
    if application in BLOCKED_APPLICATIONS:
        del BLOCKED_APPLICATIONS[application]
        print(f"Unblocked connections for application: {application}")
    else:
        print(f"{application} is not blocked")

def is_website_in_hosts(website):
    with open('/etc/hosts', 'r') as hosts_file:
        return any(website in line for line in hosts_file)

def is_ip_port_in_hosts(ip, port):
    with open('/etc/hosts', 'r') as hosts_file:
        return any(f"{ip}:{port}" in line for line in hosts_file)

def get_dns_servers(website):
    url = f"https://whois.domaintools.com/{website}"
    response = requests.get(url)
    dns_servers = []
    if response.status_code == 200:
        content = response.text
        start_marker = "<td>DNS</td>"
        end_marker = "</td>"
        start_index = content.find(start_marker)
        if start_index != -1:
            end_index = content.find(end_marker, start_index + len(start_marker))
            if end_index != -1:
                dns_servers = content[start_index + len(start_marker):end_index].split("<br>")
    return dns_servers

def block_website_on_system(website):
    with open('/etc/hosts', 'a') as hosts_file:
        hosts_file.write(f"\n# Blocked Websites\n")
        hosts_file.write(f"0.0.0.0 {website}\n")  # Redirect website to non-existent IP

def unblock_website_on_system(website):
    lines = []
    with open('/etc/hosts', 'r') as hosts_file:
        lines = hosts_file.readlines()
    with open('/etc/hosts', 'w') as hosts_file:
        blocklist_started = False
        for line in lines:
            if line.strip() == "# Blocked Websites":
                blocklist_started = True
            elif blocklist_started and line.strip() == "":
                blocklist_started = False
            if not (blocklist_started and line.startswith(f"0.0.0.0 {website}")):
                hosts_file.write(line)

def show_blocked_items(blocked_items, label):
    print(f"Blocked {label}:")
    for item in blocked_items:
        print(item)

def show_blocked_ips():
    show_blocked_items(BLOCKED_IPS.keys(), "IPs with specific ports")

def show_blocked_websites():
    show_blocked_items(BLOCKED_WEBSITES.keys(), "Websites")

def show_blocked_applications():
    show_blocked_items(BLOCKED_APPLICATIONS.keys(), "Applications")

def show_blacklist_items():
    show_blocked_ips()
    show_blocked_websites()
    show_blocked_applications()

# Main function
def main():
    while True:
        print("\n========== Welcome to Firewall ==========")
        print("1. Add IP with specific port to Block")
        print("2. Add Website to Block")
        print("3. Add Application to Block Connection (Internet)")
        print("4. Remove IP with specific port from Block")
        print("5. Remove Website from Block")
        print("6. Remove Application from Block")
        print("7. Show Blacklist Items")
        print("8. Exit")
        print("Project by Junaid Arshad Malik")
        print("=========================================")
        choice = input("Enter your choice: ")

        if choice == '1':
            ip = input("Enter IP to block: ")
            port = input("Enter port to block: ")
            add_ip_to_block(ip, port)
        elif choice == '2':
            website = input("Enter website to block: ")
            add_website_to_block(website)
        elif choice == '3':
            application = input("Enter application to block: ")
            add_application_to_block(application)
        elif choice == '4':
            ip = input("Enter IP to unblock: ")
            port = input("Enter port to unblock: ")
            remove_ip_from_block(ip, port)
        elif choice == '5':
            website = input("Enter website to unblock: ")
            remove_website_from_block(website)
        elif choice == '6':
            application = input("Enter application to unblock: ")
            remove_application_from_block(application)
        elif choice == '7':
            show_blacklist_items()
        elif choice == '8':
            print("Exiting...")
            break
        else:
            print("Invalid choice")

if __name__ == "__main__":
    main()
